#!/bin/bash

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# STOP SYSTEMD SERVICE
#=================================================
ynh_script_progression "Stopping $app's systemd service..."

ynh_systemctl --service=$app --action="stop"

ynh_systemctl --service=$app.timer --action="stop"

#=================================================
# ENSURE DOWNWARD COMPATIBILITY
#=================================================
ynh_script_progression "Ensuring downward compatibility..."

if [[ "${mailalert:-}" != "always" && "${mailalert:-}" != "errors_only" && "${mailalert:-}" != "never" ]]; then
    ynh_app_setting_set --key="mailalert" --value="errors_only"
    export mailalert="errors_only"
fi

if [ -z "${healthchecks_url:-}" ]; then
    ynh_app_setting_set --key="healthchecks_url" --value=""
fi

if [ -z "${remote_path:-}" ]; then
    ynh_app_setting_set --key="remote_path" --value="borg"
fi

# The config panel used to set bad values for "on_calendar". Users
# especially experienced issues when they set values that contain spaces,
# which seem to be replaced with semi-colons (;).
#
# In case the value is incorrect, let's instead retrieve it from
# the systemd timer config file.
if ynh_app_upgrading_from_version_before 1.4.1~ynh2 && ! systemd-analyze calendar "$on_calendar" &>/dev/null; then
    ynh_print_info --message='Fixing stored value for "on_calendar" setting (Issue 224)'
    on_calendar=$(systemctl cat "$app.timer" | grep -Po "OnCalendar=\K.*")
    ynh_app_setting_set --key="on_calendar" --value="$on_calendar"
fi

path_with_borg="$install_dir/wrapper:$PATH"

# env_keep for sudoers. This line extracts the environment variable names from env.jinja.
env_keep=$(grep -Po '^\w+(?==)' ../conf/env.jinja | tr "\n" " ")

ynh_app_setting_set_default --key="state" --value="not run since last update"
ynh_app_setting_set_default --key="last_run" --value="-"
ynh_app_setting_set_default --key="healthchecks_url" --value=""
ynh_app_setting_set_default --key=remote_path --value=""

if [ -z "$repository" ]; then
    repository="ssh://$ssh_user@$server/~/backup"
    server=$(echo "$repository" | cut -d"@" -f2 | cut -d"/" -f1)
    if [[ $server == *":"* ]]; then
        server="[$(echo "$server" | cut -d":" -f1)]:$(echo "$server" | cut -d":" -f2)"
    fi
    ynh_app_setting_set --key=repository --value="$repository"
    ynh_app_setting_set --key=server --value="$server"
    ynh_app_setting_delete $app ssh_user
fi

if grep "borg.timer" /etc/yunohost/services.yml > /dev/null ; then
    yunohost service remove $app.timer
    systemctl enable $app.timer --quiet
    systemctl start $app.timer
fi

# Replace backports with pip
[ ! -e " /etc/apt/sources.list.d/$app-stretch-backports.list" ] || rm -f /etc/apt/sources.list.d/$app-stretch-backports.list

# Clear legacy stuff
if [ -d /opt/borg-env ]; then
    ynh_safe_rm "/opt/borg-env"
    ynh_safe_rm "/usr/local/bin/borg"
    ynh_safe_rm "/usr/local/bin/backup-with-borg"
fi

#=================================================
# UPGRADE BORG
#=================================================
ynh_script_progression "Upgrading Borg..."

install_borg_with_pip

_gen_and_save_public_key

mkdir -p "/var/log/$app"
chown -R $app:$app "/var/log/$app"
chmod u+w "/var/log/$app"

#=================================================
# SETUP THE BACKUP METHOD
#=================================================
ynh_script_progression "Setting up backup method..."

mkdir -p /etc/yunohost/hooks.d/backup
mkdir -p /etc/yunohost/hooks.d/backup_method
mkdir -p /usr/share/yunohost/backup_method

ynh_config_add --template="backup_method" --destination="/etc/yunohost/hooks.d/backup_method/05-${app}_app"
chmod go=--- "/etc/yunohost/hooks.d/backup_method/05-${app}_app"

# To avoid privilege escalation, let's only assign the group to borg
# so it is able to execute the command but can't alter the binary.
ynh_config_add --template="backup-with-borg" --destination="$install_dir/backup-with-borg"
chmod 0550 "$install_dir/backup-with-borg"
chown "root:$app" "$install_dir/backup-with-borg"

ynh_config_add --template="sudoer" --destination="/etc/sudoers.d/$app"
chown root:root "/etc/sudoers.d/$app"

ynh_config_add --template="logging.conf" --destination="$install_dir/logging.conf"
chown "$app:$app" "$install_dir/logging.conf"

ynh_config_add --template="env.jinja" --destination="$install_dir/.env" --jinja
chmod 0400 "$install_dir/.env"
chown "$app:$app" "$install_dir/.env"

install -o "root" -g "$app" -m 0750 -d "$install_dir/wrapper"
ynh_config_add --template="borg_wrapper" --destination="$install_dir/wrapper/borg"
chmod 0550 "$install_dir/wrapper/borg"
chown "root:$app" "$install_dir/wrapper/borg"

#=================================================
# REAPPLY SYSTEM CONFIGURATIONS
#=================================================
ynh_script_progression "Upgrading system configurations related to $app..."

ynh_config_add_systemd

yunohost service add $app --description="Deduplicating backup program" --test_status="systemctl show $app.service  -p ActiveState --value | grep -v failed"  --log "/var/log/$app/borg.log"

systemctl disable $app.service --quiet

ynh_config_add --template="systemd.timer" --destination="/etc/systemd/system/$app.timer"

ynh_config_add_logrotate

#=================================================
# START SYSTEMD SERVICE
#=================================================
ynh_script_progression "Starting $app's systemd service..."

systemctl enable $app.timer --quiet
systemctl start $app.timer

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression "Upgrade of $app completed"
